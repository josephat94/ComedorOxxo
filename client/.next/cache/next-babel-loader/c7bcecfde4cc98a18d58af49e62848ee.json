{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/layout/Layout';\nimport FileLoader from '../components/fileLoader/FileLoader';\nimport Title from '../components/title/Title';\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport Toast from 'react-bootstrap/Toast';\nimport Spinner from 'react-bootstrap/Spinner';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst Actions = props => {\n  const {\n    onCancel,\n    onSuccess\n  } = props;\n  return __jsx(\"div\", {\n    className: \"actions__ctn\"\n  }, __jsx(Button, {\n    variant: \"outline-danger\",\n    onClick: onCancel\n  }, \"Cancelar\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: onSuccess\n  }, \"Guardar\"));\n};\n\nconst CargarArchivo = props => {\n  const {\n    0: files,\n    1: setFiles\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const saveFile = async () => {\n    const formdata = new FormData();\n    formdata.append('csv', files);\n    setError(false);\n    setSuccess(false);\n    setLoading(true);\n\n    try {\n      const response = await fetch('http://' + process.env.API_HOST + '/schedule', {\n        method: 'POST',\n        headers: {},\n        body: formdata\n      });\n      setSuccess(true);\n      setLoading(false);\n      setFiles(null);\n      toast.success('Archivo csv cargado correctamente');\n    } catch (error) {\n      setError(true);\n      setLoading(false);\n      toast.error('Error al subir el archvio csv');\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(Title, null, \"Cargar archivo CSV\"), loading ? __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Cargando horarios...\")) : __jsx(FileLoader, {\n    files: files,\n    setFiles: setFiles\n  }), files ? __jsx(Actions, {\n    onCancel: () => {\n      setFiles([]);\n    },\n    onSuccess: saveFile\n  }) : null);\n};\n\nexport default CargarArchivo;","map":null,"metadata":{},"sourceType":"module"}